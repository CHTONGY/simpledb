package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p;
    private DbIterator[] children;

    private Tuple joinT1;
    private Tuple joinT2;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.p = p;
        this.children = new DbIterator[]{child1, child2};
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(children[0].getTupleDesc(), children[1].getTupleDesc());
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
	    return children[0].getTupleDesc().getFieldName(p.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return children[1].getTupleDesc().getFieldName(p.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        for(DbIterator child : children) {
            child.open();
        }
    }

    public void close() {
        // some code goes here
        super.close();
        for(DbIterator child : children) {
            child.close();
        }
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        for(DbIterator child : children) {
            child.rewind();
        }
        listIt = null;
    }

    transient Iterator<Tuple> listIt = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if(listIt == null) {
            Map<Field, List<Tuple>> t1Map = new HashMap<>();
//            List<Tuple> t1List = new ArrayList<>();
//            List<Tuple> t2List = new ArrayList<>();
            List<Tuple> tList = new ArrayList<>();
            while (children[0].hasNext()) {
                Tuple t = children[0].next();
                Field key = t.getField(p.getField1());
                if(!t1Map.containsKey(key)) {
                    t1Map.put(key, new ArrayList<>());
                }
                t1Map.get(key).add(t);
            }
            while (children[1].hasNext()) {
                Tuple t = children[1].next();
                Field key = t.getField(p.getField2());
                if(t1Map.containsKey(key)) {
                    for(Tuple t2 : t1Map.get(key)) {
                        Tuple newT = mergeTuple(t2, t);
                        tList.add(newT);
                    }
                }
            }
            listIt = tList.iterator();
        }
        if(listIt.hasNext()) {
            return listIt.next();
        }
        return null;
    }

    private Tuple mergeTuple(Tuple t1, Tuple t2) {
        Tuple t = new Tuple(TupleDesc.merge(t1.getTupleDesc(), t2.getTupleDesc()));
        int index = 0;
        for(Iterator<Field> it = t1.fields(); it.hasNext();) {
            t.setField(index++, it.next());
        }
        for(Iterator<Field> it = t2.fields(); it.hasNext();) {
            t.setField(index++, it.next());
        }
        return t;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return this.children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.children = children;
    }
    
}
